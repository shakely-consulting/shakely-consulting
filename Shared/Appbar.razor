@inject IJSRuntime Js;
@using UAParser;
@using System.Collections.Generic;
@inherits MudComponentBase;

<div id="appbar" class="hide"></div>
<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudIconButton OnClick="DrawerToggleCallback" Icon="@Icons.Rounded.Notes" Color="Color.Inherit" Edge="Edge.Start"/>
    <MudSpacer/>
    <NavLink ActiveClass="d-flex" href="">
        <MudBlazorLogo Class="docs-mudblazor-logo"/>
        <MudText Color="Color.Primary" Typo="Typo.h5" Class="docs-brand-text">SC</MudText>
    </NavLink>
    <MudSpacer/>
    @if (DisplaySearchBar)
    {
            <MudIconButton Icon="@Icons.Rounded.Search" Color="Color.Inherit" Edge="Edge.End" OnClick="@(() => OpenSearchDialog())"/>
    }
    else
    {
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Edge="Edge.End" Href="https://github.com/MessiDaGod/SC"/>
    }
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
        <NavLink ActiveClass="d-flex me-4" href="">
            <MudBlazorLogo Class="docs-mudblazor-logo"/>
            <MudText Color="Color.Primary" Typo="Typo.h5" Class="docs-brand-text" >SC</MudText>
        </NavLink>
        <MudButton id="showSC" @onclick="ShowSC" Color="Color.Inherit" Variant="Variant.Text" Class="@String.Concat(GetActiveClass(DocsBasePage.SC), " active")">Shakely Consulting</MudButton>
        <MudButton id="showsql" @onclick="ShowSql" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocsBasePage.SQL)">SQL</MudButton>
        <MudButton id="showcandles" @onclick="ShowCandles" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocsBasePage.SQL)">Candlestick</MudButton>
        <MudSpacer/>
        @if (DisplaySearchBar)
    {
            <MudAutocomplete AutoFocus="true" @ref="_searchAutocomplete" T="ApiLinkServiceEntry" Placeholder="Search" SearchFunc="Search" Variant="Variant.Outlined" ValueChanged="OnSearchResult" Class="docs-search-bar mx-4" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search">
                <ItemTemplate Context="result">
                    <MudText>@result.Title</MudText> <MudText Typo="Typo.body2">@result.SubTitle</MudText>
                </ItemTemplate>
            </MudAutocomplete>
            <MudDivider FlexItem="true" Vertical="true" DividerType="DividerType.Middle" Class="mx-4 my-4"/>
    }
    else
    {
            <MudIconButton Class="mr-0" Icon="@Icons.Rounded.Search" Color="Color.Inherit" Edge="Edge.End" OnClick="@(() => OpenSearchDialog())"/>
    }
    <AppbarButtons/>
    <MudTooltip Duration="1000" Text="GitHub Repository">
        <MudIconButton Href="https://github.com/MessiDaGod/SC" Target="_blank" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Edge="Edge.End"/>
    </MudTooltip>
</MudHidden>


<MudDialog @bind-IsVisible="_searchDialogOpen" Options="_dialogOptions" Class="docs-gray-bg" ClassContent="docs-mobile-dialog-search">
    <DialogContent>
        <MudAutocomplete @ref="_searchAutocomplete" T="ApiLinkServiceEntry" PopoverClass="docs-mobile-dialog-search-popover" Placeholder="Search docs" SearchFunc="Search" ValueChanged="OnSearchResult" Clearable="true" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search">
            <ItemTemplate Context="result">
                <MudText>@result.Title</MudText> <MudText Typo="Typo.body2">@result.SubTitle</MudText>
            </ItemTemplate>
        </MudAutocomplete>
        <div class="d-flex justify-center align-center mud-height-full pb-16">
            <MudText Typo="Typo.body2" Class="mud-text-secondary">Nothing found, do a search</MudText>
        </div>
    </DialogContent>
</MudDialog>

<style>
    .active {
        color: var(--mud-palette-primary) !important;
        transition: background-color 150ms cubic-bezier(.4,0,.2,1) 0ms;
        border-bottom: 2px solid var(--mud-palette-primary);
        padding: 6px 12px;
        min-height: 48px;
        flex-shrink: 0;
        font-weight: 500;
        line-height: 1.75;
        user-select: none;
        white-space: normal;
    }

    .hide {
        display: none !important;
    }
</style>
@code {

    private static List<string> MyPages { get; set; } = new();

    async Task ShowXmas()
    {
        await Js.InvokeVoidAsync("SC.setActiveDiv", "showisitchristmas");
    }
    async Task ShowSql()
    {
        await Js.InvokeVoidAsync("SC.setActiveDiv", "showsql");
    }
    async Task ShowSC()
    {
        await Js.InvokeVoidAsync("SC.setActiveDiv", "showSC");
    }
    async Task ShowCandles()
    {
        await Js.InvokeVoidAsync("SC.setActiveDiv", "showcandles");
    }
}
